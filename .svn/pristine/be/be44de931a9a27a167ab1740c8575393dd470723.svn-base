@using TIGE.Utils.Notification.Models
@using Elect.Web.ITempDataDictionaryUtils
@using EnumsNET
@using TIGE.Core.Share.Constants
@using TIGE.Core.Share.Utils

@{
    var loggedInUserJson = LoggedInUser.Current == null
        ? Html.Raw("{}")
        : Html.Raw(JsonConvert.SerializeObject(LoggedInUser.Current, Formattings.JsonSerializerSettings));
}

<script src="@Url.AbsoluteContent("~/portal/skin/vendors/base/vendors.bundle.js")" type="text/javascript"></script>
<script src="@Url.AbsoluteContent("~/portal/skin/skin/base/scripts.bundle.js")" type="text/javascript"></script>
<script src="@Url.AbsoluteContent("~/vendor/jquery.validate/jquery.validate.unobtrusive.min.js")"></script>

<!-- DataTable -->
<script src="~/vendor/jquery.dataTables/jquery.dataTables.min.js"></script>
<script src="~/vendor/jquery.dataTables/jquery.dataTables.columnFilter.min.js"></script>
<script src="~/vendor/jquery.dataTables/buttons.colVis.min.js"></script>
<script src="~/vendor/jquery.dataTables/dataTables.buttons.min.js"></script>
<script src="~/vendor/jquery.dataTables/dataTables.colReorder.min.js"></script>




<!-- include summernote css/js -->
<link href="http://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.11/summernote.css" rel="stylesheet">
<script src="http://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.11/summernote.js"></script>


<script src="@Url.AbsoluteContent("~/portal/js/core.js")" type="text/javascript"></script>




<script type="text/javascript">
    $('form').each(function () {
        if ($(this).data('validator'))
            $(this).data('validator').settings.ignore = ".note-input *";
    });

    //(function(d, s, id) {
    //        var js, fjs = d.getElementsByTagName(s)[0];
    //        if (d.getElementById(id)) return;
    //        js = d.createElement(s); js.id = id;
    //        js.src = 'https://connect.facebook.net/vi_VN/sdk/xfbml.customerchat.js';
    //        fjs.parentNode.insertBefore(js, fjs);
    //}(document, 'script', 'facebook-jssdk'));

    global.config = {
        imageDeadUrl: "https://cfl.dropboxstatic.com/static/images/avatar/faceholder-vflGRnT85.svg",
        dateTimeFormat: '@Formattings.DateTimeFormat',
        dateFormat: '@Formattings.DateFormat',
        timeFormat: '@Formattings.TimeFormat',
        timeZone: '@Formattings.TimeZone'
    }

    global.endpoint = {
        api: {
            user: {
                delete: '@Url.Action("Delete", "User", new { area = "Api", id = "PARAMETER_ID"})'
            },
            image: {
                delete: '@Url.Action("Delete", "Image", new {area = "Api", id = "PARAMETER_ID"})',
                uploadMultiPart: '@Url.Action("UploadMultiPart", "Image", new {area = "Api"})'
            },
            subscription: {
                delete: '@Url.Action("Delete", "StackSubscription", new { area = "Api", id = "PARAMETER_ID"})'
            },
            wallet: {
                delete: '@Url.Action("Delete", "StackWallet", new { area = "Api", id = "PARAMETER_ID"})'
            },
            withdraw: {
                delete: '@Url.Action("DeleteWithdraw", "StackWallet", new { area = "Api", id = "PARAMETER_ID"})'
            },
            withdrawusd: {
                delete: '@Url.Action("DeleteWithdrawUSD", "StackWallet", new { area = "Api", id = "PARAMETER_ID"})'
            },
            transfer: {
                delete: '@Url.Action("DeleteTransfer", "StackWallet", new { area = "Api", id = "PARAMETER_ID"})'
            },
            slot: {
                delete: '@Url.Action("Delete", "Slot", new { area = "Api", id = "PARAMETER_ID"})'
            },
            business: {
                delete: '@Url.Action("Delete", "Business", new { area = "Api", id = "PARAMETER_ID"})'
            },
            protectionFee: {
                delete: '@Url.Action("Delete", "ProtectionFee", new { area = "Api", id = "PARAMETER_ID"})'
            },
            token: {
                delete: '@Url.Action("Delete", "Token", new { area = "Api", id = "PARAMETER_ID"})'
            }
        },
        page: {
            user: {
                edit:  '@Url.Action("Edit", "User", new { area = "StackAdmin", id = "PARAMETER_ID"})'
            },
            subscription: {
                edit: '@Url.Action("Edit", "StackSubscription", new { area = "StackAdmin", id = "PARAMETER_ID"})'
            },
            wallet: {
                edit: '@Url.Action("Edit", "StackWallet", new { area = "StackAdmin", id = "PARAMETER_ID"})'
            },
            withdraw: {
                edit: '@Url.Action("EditWithdraw", "StackWallet", new { area = "StackAdmin", id = "PARAMETER_ID"})'
            },
            withdrawusd: {
                edit: '@Url.Action("EditConvert", "StackWallet", new { area = "StackAdmin", id = "PARAMETER_ID"})'
            },
            transfer: {
                edit: '@Url.Action("EditTransfer", "StackWallet", new { area = "StackAdmin", id = "PARAMETER_ID"})'
            },
            slot: {
                edit: '@Url.Action("Edit", "Slot", new { area = "StackAdmin", id = "PARAMETER_ID"})'
            },
            business: {
                edit: '@Url.Action("Edit", "Business", new { area = "StackAdmin", id = "PARAMETER_ID"})'
            },
            protectionFee: {
                edit: '@Url.Action("Edit", "ProtectionFee", new { area = "StackAdmin", id = "PARAMETER_ID"})'
            },
            token: {
                edit: '@Url.Action("Edit", "Token", new { area = "StackAdmin", id = "PARAMETER_ID"})'
            }
        }
    };

    global.currentUser = @loggedInUserJson;

    $(function() {
        @{
            var notifyData = TempData.Get<NotificationModel>(TempDataKey.Notify);
            TempData.Remove(TempDataKey.Notify);

            if (notifyData != null)
            {
                string type = notifyData.Status.AsString(EnumFormat.DisplayName);
                @Html.Raw($"global.util.notify('{notifyData.Title}', '{notifyData.Message}', '{type}');")
            }
        }
    })
</script>