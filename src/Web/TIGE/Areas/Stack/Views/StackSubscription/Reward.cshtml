@using Elect.Core.ObjUtils
@using TIGE.Contract.Repository.Models.Stacking
@using TIGE.Contract.Service
@using TIGE.Core.Share.Utils
@using TIGE.Core.Utils
@using X.PagedList.Mvc.Core
@using X.PagedList
@using X.PagedList.Web.Common
@inject IStackConfigService ConfigurationService
@model IPagedList<HistoryRefundEntity>
@{
    var config = ConfigurationService.GetConfig();

    //var refunds = ViewBag.Refund as List<HistoryRefundEntity>;
}


<section class="pt-150 pb-150">
    <div class="container">
        <div class="row mt-50">
            <div class="col-lg-12">
                <h2 class="section-title text-center mb-30"><span class="font-weight-normal">Reward </span> <b class="base--color">History</b></h2>
                <div class="table-responsive p-0" style="max-width:inherit;max-height:500px;">
                    <table class="table style--two white-space-nowrap">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Stake ID</th>
                                <th>Reward Time</th>
                                <th>Amount (TIGE)</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{

                                if (Model != null)
                                {
                                    foreach (var history in Model)
                                    {
                                        <tr>
                                            <td data-label="ID">@history.Id</td>
                                            <td data-label="Stake ID">@history.FromStack</td>
                                            <td data-label="Reward Time">
                                                <span class="text-success">@history.CreatedTime.ToString("dd/MM/yyyy HH:mm:ss")</span>
                                            </td>
                                            <td data-label="Amount (TIGE)">
                                                <span class="text-success">@history.Amount.ToString("###,###,###,###0.##")</span>
                                            </td>
                                        </tr>
                                    }
                                }
                            }
                        </tbody>
                    </table>                   
                </div>
                <div class="text-right">
                     <p style="padding-bottom:10px;">Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount</p>
                    @Html.PagedListPager(
                        Model, 
                        page => Url.Action("Reward", new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }),
                        new PagedListRenderOptions {
                            ContainerDivClasses = new [] { "pagination-container" },
                            UlElementClasses = new[] { "pagination justify-content-end mt-0" },
                            DisplayLinkToFirstPage = PagedListDisplayMode.IfNeeded,
			                DisplayLinkToLastPage = PagedListDisplayMode.IfNeeded,
			                DisplayLinkToPreviousPage = PagedListDisplayMode.Never,
			                DisplayLinkToNextPage = PagedListDisplayMode.Never,
                            MaximumPageNumbersToDisplay = 5,
                            LinkToNextPageFormat = "»",
			                LinkToLastPageFormat = "»»",
                            LiElementClasses = new string[] { "page-item" },
                            PageClasses = new string[] { "page-link" },
                        }
                    )
                </div>
            </div>
        </div>
    </div>
</section>

@section Scripts{

}
